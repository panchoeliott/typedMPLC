Things to edit when adding an ast term:

Syntax:
0. Add Name to Expr
1. data Expr Tick
2. Tag Tick
3. BinOp on AST's Later
4. UniOp on AST's Later
5. bv and fv on AST's Tick

Eval:
6. evalFC
7. evalFCLetRec1
8. grows
8. evalPrimBin
9. sub
10. isValue'

Test:
tAST

data Expr
    = VarRep  Name
    
    | Var Name 
    | Lam Name Expr
    | App Expr Expr
    | LitN Int
    | LitB Bool
    | PrimUni UniOp Expr
    | PrimBin BinOp Expr Expr
    | If Expr Expr Expr 
    | Let Name Expr Expr
    | LetRec Name Expr Expr
    --AST expression:
    | AST [Expr]
    | VarRep Name
    --up and down arrow (meta-level):
    | DownA Expr
    | UpA Expr
    --eval:
    | Eval Expr
    --lift:

    Forget this until later
    | Lift Expr
    
    --LetDA x = M in N:
    | LetDA Name Expr Expr
    --Tag:
    | TagExpr Tag
    --error:
    | Error Expr
    deriving (Show, Eq) 
    
data Tag = 
      TVarRep  (ensure UpML of (VarRep  string) is AST [TagExpr TVarRep , VarRep  string] )
    | TVar    (ensure UpML of (Var name) is AST [TagExpr TVar, AST [TagExpr TVarRep  , VarRep  string] ] )
    | TLam 
    | TApp 
    | TLitN 
    | TLitB 
    | TPrimUni UniOp 
    | TPrimBin BinOp 
    | TIf 
    | TLet 
    | TLetRec 
    | TPromote
    | TEval
    deriving (Show, Eq)    
    

data BinOp = Add | Mul | Min | Div | Eq | Lt | Gt | GtEq | Or | And
    deriving (Show, Eq)


Questions:

what does Lift do? is it essentially up level evaluation? what is Lift (Lam "x" (Var "x"))?? Is it: 
AST [TagExpr TLift, VarRep "x", (Var "x")] 
or 
AST [TagExpr TLift, AST [TagExpr TVarRep , VarRep  "x"], AST [TagExpr TVar, VarRep  "x"]]


in evalFCDL should :

evalFCDL (VarRep  string1, n) = Error
evalFCDL (AST [TagExpr TVarRep, exp1], n) = case exp1 of
    VarRep  string1     -> (VarRep  string1, n)
    otherwise       -> (Error (DownA (AST [TagExpr TVarRep, exp1])), n)
    
or
evalFCDL (VarRep  string1, n) = (VarRep  string1, n)
evalFCDL (AST [TagExpr TVarRep, ulexp1], n) = case exp1 of
    VarRep  string1     -> (VarRep  string1, n)
    otherwise       -> (Error (DownA (AST [TagExpr TVarRep , exp1])), n)
    where (exp1, newn) = evalFCDL (ulexp1, n)    

